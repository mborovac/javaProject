<project name="HW3" default="jar" basedir="." xmlns:cs="antlib:com.puppycrawl.tools.checkstyle" xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
		Build datoteka za 3. Java zadacu
	</description>

	<!-- Postavljanje globalnih varijabli -->
	<property name="src" location="src"/>
	<property name="src.java" location="${src}/main/java"/>
	<property name="src.test" location="${src}/test/java"/>
	<property name="build" location="build"/>
	<property name="build.classes" location="${build}/classes"/>
	<property name="build.test" location="${build}/test"/>
	<property name="dist" location="dist"/>
	<property name="dist.lib" location="${dist}/lib"/>
	<property name="program" value="hr.fer.zemris.java.tecaj.HW3.HW3Tester" />
	
	<!-- Postavljanje varijabli za alate -->
	<property file="config.properties"/>
	<!--property name="checkstyle.home" value="c:/usr/checkstyle-5.7" />
	<property name="xalan.home" value="c:/usr/xalan-j_2_7_1" />
	<property name="pmd.home" value="c:/usr/pmd-bin-5.1.0" />
	<property name="findbugs.home" value="c:/usr/findbugs-2.0.3" />
	<property name="junit.home" value="c:/usr/junit-4.11" />
	<property name="jacoco.home" value="c:/usr/jacoco-0.7.1" /-->
	
	<!-- Definiranje naredbe koja pokreće check style -->
	<taskdef uri="antlib:com.puppycrawl.tools.checkstyle" resource="checkstyletask.properties" classpath="${checkstyle.home}/${checkstyle.jar}" />
	
	<!-- Definiranje staze do PMD biblioteka: -->
	<path id="pmd.lib" >
		<fileset dir="${pmd.home}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<!-- Definiranje naredbi koje pokreću PMD analize -->
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.lib" />
	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.lib" />
	
	<!-- Definiranje naredbe koja pokreće findbugs -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath path="${findbugs.home}/lib/findbugs-ant.jar"/>
	</taskdef>
	
	<!-- Definiranje staze za prevođenje koda -->
	<path id="compile.path">
		<pathelement location="${build.classes}"/>
	</path>
	
	<!-- Definiranje staze za prevođenje testova -->
	<path id="test.path">
		<path refid="compile.path"/>
		<pathelement location="${build.test}"/>
		<fileset dir="${junit.home}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.home}/lib/jacocoant.jar"/>
	</taskdef>
	
	<target name="init">
		<!-- Stvaranje vremenske oznake -->
		<tstamp/>
		<!-- Stvaranje potrebnih direktorija -->
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
	</target>

	<target name="compile" depends="init" description="Prevođenje izvornog koda">
		<mkdir dir="${build.classes}"/>
		<!-- Prevođenje Java koda iz ${src} u ${build} -->
		<javac srcdir="${src.java}" destdir="${build.classes}" encoding="UTF-8" debug="on" debuglevel="lines,vars,source" includeAntRuntime="false" />
	</target>

	<target name="run" depends="compile" description="Pokretanje programa">
		<!-- Poziv virtualnog stroja koji će pokrenuti napisani program. -->
		<java classname="${program}" classpath="${build.classes}" fork="true">
			<jvmarg value="-Dfile.encoding=IBM852" />
		</java>
	</target>
	
	<target name="compile-tests" depends="compile" description="Prevođenje izvornog koda testova">
		<mkdir dir="${build.test}"/>
		<!-- Prevođenje Java koda iz ${src} u ${build} -->
		<javac srcdir="${src.test}" destdir="${build.test}" classpathref="test.path" encoding="UTF-8" debug="on" 
		debuglevel="lines,vars,source" includeAntRuntime="false" />
	</target>
	
	<target name="run-tests" depends="compile-tests" description="Izvođenje definiranih testova" >
		<mkdir dir="${dist}/test-reports/xml"/>
		<mkdir dir="${dist}/test-reports/html"/>
		<mkdir dir="${dist}/test-reports/coverage"/>

		<jacoco:coverage destfile="${dist}/test-reports/xml/jacoco.exec">
			<junit printsummary="yes" haltonfailure="yes" fork="true" forkmode="once">
				<classpath refid="test.path" />

				<formatter type="plain"/>
				<formatter type="xml"/>

				<batchtest fork="yes" todir="${dist}/test-reports/xml">
					<fileset dir="${src.test}">
						<include name="**/*Test*.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${dist}/test-reports/xml">
			<fileset dir="${dist}/test-reports/xml">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${dist}/test-reports/html"/>
		</junitreport>
		<!-- Generiraj izvještaj o pokrivenosti koda testovima -->
		<jacoco:report>
			<executiondata>
				<file file="${dist}/test-reports/xml/jacoco.exec"/>
			</executiondata>
			<structure name="${ant.project.name}">
				<classfiles>
					<fileset dir="${build.classes}"/>
					<fileset dir="${build.test}"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.java}"/>
					<fileset dir="${src.test}"/>
				</sourcefiles>
			</structure>
			<html destdir="${dist}/test-reports/coverage"/>
		</jacoco:report>
	</target>
	
	<target name="javadoc" depends="compile" description="Generiranje dokumentacije" >
		<!-- Stvaranje direktorija za distribuciju -->
		<mkdir dir="${dist}/doc"/>
		<javadoc packagenames="hr.*" sourcepath="${src.java}" Overview="${src.java}/overview.html" defaultexcludes="yes" 
		destdir="${dist}/doc" Encoding="UTF-8" docencoding="UTF-8" charset="UTF-8" author="true" version="true" use="true" 
		windowtitle="Dokumentacija programa">
			<doctitle>
				<![CDATA[<h1>HW3</h1>]]>
			</doctitle>
			<bottom>
				<![CDATA[<i>Copyright &#169; 2013 ACME.
				All Rights Reserved.</i>]]>
			</bottom>
		</javadoc>
	</target>
	
	<target name="cs" depends="compile">
		<mkdir dir="${dist}/checkstyle/xml"/>
		<mkdir dir="${dist}/checkstyle/html"/>
		<cs:checkstyle config="${checkstyle.home}/${checkstyle.style}" failOnViolation="false">
			<fileset dir="${src.java}" includes="**/*.java"/>
			<formatter type="xml" toFile="${dist}/checkstyle/xml/checkstyle_errors.xml"/>
		</cs:checkstyle>
		<xslt basedir="${dist}/checkstyle/xml" destdir="${dist}/checkstyle/html" extension=".html" style="${checkstyle.home}/contrib/checkstyle-frames.xsl">
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</xslt>
	</target>
	
	<target name="pmd" depends="compile">
		<mkdir dir="${dist}/pmd/xml"/>
		<mkdir dir="${dist}/pmd/html"/>
		<pmd shortFilenames="true" encoding="UTF-8">
			<ruleset>rulesets/java/basic.xml</ruleset>
			<ruleset>rulesets/java/braces.xml</ruleset>
			<ruleset>rulesets/java/codesize.xml</ruleset>
			<ruleset>rulesets/java/controversial.xml</ruleset>
			<ruleset>rulesets/java/design.xml</ruleset>
			<ruleset>rulesets/java/finalizers.xml</ruleset>
			<ruleset>rulesets/java/imports.xml</ruleset>
			<ruleset>rulesets/java/naming.xml</ruleset>
			<ruleset>rulesets/java/optimizations.xml</ruleset>
			<ruleset>rulesets/java/strictexception.xml</ruleset>
			<ruleset>rulesets/java/strings.xml</ruleset>
			<ruleset>rulesets/java/sunsecure.xml</ruleset>
			<ruleset>rulesets/java/typeresolution.xml</ruleset>
			<ruleset>rulesets/java/unusedcode.xml</ruleset>
			<ruleset>rulesets/java/unnecessary.xml</ruleset>
			<formatter type="xml" toFile="${dist}/pmd/xml/pmd_report.xml"/>
			<fileset dir="${src.java}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		<cpd minimumTokenCount="10" outputFile="${dist}/pmd/xml/cpd_report.xml" format="xml" encoding="UTF-8">
			<fileset dir="src">
				<include name="**/*.java"/>
			</fileset>
		</cpd>
		<xslt includes="cpd_report.xml" basedir="${dist}/pmd/xml" destdir="${dist}/pmd/html" extension=".html" style="${pmd.home}/etc/xslt/cpdhtml.xslt" >
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</xslt>
		<xslt includes="pmd_report.xml" basedir="${dist}/pmd/xml" destdir="${dist}/pmd/html" extension=".html" style="${pmd.home}/etc/xslt/wz-pmd-report.xslt" >
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</xslt>
	</target>
	
	<target name="findbugs" depends="compile">
		<mkdir dir="${dist}/findbugs/xml"/>
		<mkdir dir="${dist}/findbugs/html"/>
		<findbugs home="${findbugs.home}" output="xml:withMessages" outputFile="${dist}/findbugs/xml/report.xml" workHard="true" 
		effort="max" projectName="${ant.project.name}">
			<sourcePath path="${src.java}" />
			<class location="${build.classes}" />
		</findbugs>
		<xslt includes="report.xml" basedir="${dist}/findbugs/xml" destdir="${dist}/findbugs/html" extension=".html" 
		style="${findbugs.home}/src/xsl/fancy.xsl" >
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</xslt>
	</target>
	
	<target name="quality" depends="run-tests,cs,pmd,findbugs" description="Provjera kvalitete koda" />
	
	<target name="reports" depends="quality,javadoc" description="Svi izvještaji" />

	<target name="jar" depends="compile" description="Pakiranje programa u arhivu JAR" >
		<!-- Stvaranje direktorija za distribuciju -->
		<mkdir dir="${dist.lib}"/>
		<!-- Arhiviranje svega iz ${build} u arhivu ${ant.project.name}-${DSTAMP}.jar -->
		<jar jarfile="${dist.lib}/${ant.project.name}-${DSTAMP}.jar" basedir="${build.classes}">
			<manifest>
				<attribute name="Main-Class" value="${program}"/>
			</manifest>
		</jar>
	</target>
	
	<target name="jarrun" depends="jar" description="Pokretanje programa iz JAR-a">
		<!-- Poziv virtualnog stroja koji će pokrenuti napisani program. -->
		<java classname="${program}" classpath="${dist.lib}/${ant.project.name}-${DSTAMP}.jar" fork="true">
			<jvmarg value="-Dfile.encoding=IBM852" />
		</java>
	</target>

	<target name="clean" description="Brisanje generiranog sadržaja" >
		<!-- Obriši direktorije ${build} i ${dist} -->
		<delete dir="${build}" failonerror="false" />
		<delete dir="${dist}" failonerror="false" />
	</target>
	
</project>
